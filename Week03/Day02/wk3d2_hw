
/* 1. Get a table of all employees details, together with their local_account_no and local_sort_code, if they have them. */

SELECT 
e.*,
p.local_account_no,
p.local_sort_code
FROM employees AS e LEFT JOIN pay_details AS p
ON e.pay_detail_id = p.id;



/* 2. Amend your query from question 1 above to also return the name of the team that each employee belongs to.*/

SELECT 
e.*,
p.local_account_no,
p.local_sort_code,
t.name AS team_name
FROM 
(employees AS e LEFT JOIN pay_details AS p
ON e.pay_detail_id = p.id)
INNER JOIN teams AS t
ON e.team_id = t.id


/*3. Find the first name, last name and team name of employees who are members of teams for which 
 * the charge cost is greater than 80. Order the employees alphabetically by last name.*/

SELECT
e.first_name,
e.last_name,
t.name AS team_name
FROM employees AS e INNER JOIN teams AS t
ON e.team_id = t.id
WHERE (CAST(t.charge_cost AS INT) > 80)
ORDER BY e.last_name;


/* 4. Breakdown the number of employees in each of the teams, including any teams without members. 
 * Order the table by increasing size of team. */

SELECT
t.name,
COUNT(e.id) AS number_of_employee
FROM teams AS t LEFT JOIN employees AS e
ON t.id = e.team_id 
GROUP BY t.name;



/*5. The effective_salary of an employee is defined as their fte_hours multiplied by their salary. 
 * Get a table for each employee showing their id, first_name, last_name, fte_hours, salary and effective_salary, 
 * along with a running total of effective_salary with employees placed in ascending order of effective_salary.*/


SELECT
id,
first_name,
last_name,
fte_hours,
salary,
ROUND(salary * fte_hours) AS effective_salary,
SUM(effective_salary) OVER (ORDER BY effective_salary ASC NULLS LAST) AS running_total_effective_salary
FROM employees



/* 6. The total_day_charge of a team is defined as the charge_cost of the team multiplied by the number of employees in the team. 
 * Calculate the total_day_charge for each team.*/



